@page "/product"

@attribute [StreamRendering(true)]
@attribute [Authorize(Roles = "User")]

@rendermode InteractiveServer
@inject ProductApiClientService ProductApi
@inject IJSRuntime JSRuntime


<PageTitle>Lista de Produtos</PageTitle>

<h1>Produto</h1>

<p>Lista de todos os produtos.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Is Active</th>
                <th>Category</th>
                <th>Sku</th>
                <th>Created At</th>
                <th>Updated At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Stock</td>
                    <td>@(product.IsActive ? "Yes" : "No")</td>
                    <td>@product.Category</td>
                    <td>@product.Sku</td>
                    <td>@product.CreatedAt.ToString("g")</td>
                    <td>@product.UpdatedAt?.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}
@if (!hasMore)
{
    <p><em>Todos os produtos foram carregados.</em></p>
}
@code {
    private readonly List<ProductResponse> products = new();
    private int page = 1;
    private const int pageSize = 20;
    private bool isLoading = false;
    private bool hasMore = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMoreProducts();
            await JSRuntime.InvokeVoidAsync("initializeScrollHandler", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnScrollReachedBottom()
    {
        if (!isLoading && hasMore)
        {
            await LoadMoreProducts();
        }
    }

    private async Task LoadMoreProducts()
    {
        isLoading = true;
        StateHasChanged();

        var newProducts = await ProductApi.GetProductsPagedAsync(page, pageSize);

        if (newProducts?.Count > 0)
        {
            products.AddRange(newProducts);
            page++;
        }
        else
        {
            hasMore = false;
        }

        isLoading = false;
        StateHasChanged();
    }
}

@page "/product"

@attribute [StreamRendering(true)]


@rendermode InteractiveServer
@inject ProductApiClientService ProductApi
@inject IJSRuntime JSRuntime


<PageTitle>Lista de Produtos</PageTitle>

<h1>Produto</h1>

<p>Lista de todos os produtos.</p>

@if (products.Count == 0 && isLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
}
else
{
    <AuthorizeView Roles="@RolesAuth.Admin.ToString()">
        <Authorized>
            <MudTable Items="products" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Stock</MudTh>
                    <MudTh>Is Active</MudTh>
                    <MudTh>Category</MudTh>
                    <MudTh>Sku</MudTh>
                    <MudTh>Created At</MudTh>
                    <MudTh>Updated At</MudTh>
                </HeaderContent>
                <RowTemplate Context="product">
                    <MudTd DataLabel="Id">@product.Id</MudTd>
                    <MudTd DataLabel="Name">@product.Name</MudTd>
                    <MudTd DataLabel="Description">@product.Description</MudTd>
                    <MudTd DataLabel="Price">@product.Price.ToString("C")</MudTd>
                    <MudTd DataLabel="Stock">@product.Stock</MudTd>
                    <MudTd DataLabel="Is Active">@(product.IsActive ? "Yes" : "No")</MudTd>
                    <MudTd DataLabel="Category">@product.Category</MudTd>
                    <MudTd DataLabel="Sku">@product.Sku</MudTd>
                    <MudTd DataLabel="Created At">@product.CreatedAt.ToString("g")</MudTd>
                    <MudTd DataLabel="Updated At">@product.UpdatedAt?.ToString("g")</MudTd>
                </RowTemplate>
            </MudTable>
        </Authorized>
        <NotAuthorized>
            <MudText Color="Color.Error">Você não tem permissão para acessar esta página.</MudText>
        </NotAuthorized>
    </AuthorizeView>

}
@if (!hasMore)
{
    <MudText Typo="Typo.body1" Color="Color.Secondary">Todos os produtos foram carregados.</MudText>
}

@code {
    private readonly List<ProductResponse> products = new();
    private int page = 1;
    private const int pageSize = 20;
    private bool isLoading = false;
    private bool hasMore = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMoreProducts();
            await JSRuntime.InvokeVoidAsync("initializeScrollHandler", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task OnScrollReachedBottom()
    {
        if (!isLoading && hasMore)
        {
            await LoadMoreProducts();
        }
    }

    private async Task LoadMoreProducts()
    {
        isLoading = true;
        StateHasChanged();

        var newProducts = await ProductApi.GetProductsPagedAsync(page, pageSize);

        if (newProducts?.Count > 0)
        {
            products.AddRange(newProducts);
            page++;
        }
        else
        {
            hasMore = false;
        }

        isLoading = false;
        StateHasChanged();
    }
}

@page "/product"
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@inject ProductApiClient ProductApi

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Is Active</th>
                <th>Category</th>
                <th>Sku</th>
                <th>Created At</th>
                <th>Updated At</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price.ToString("C")</td>
                    <td>@product.Stock</td>
                    <td>@(product.IsActive ? "Yes" : "No")</td>
                    <td>@product.Category</td>
                    <td>@product.Sku</td>
                    <td>@product.CreatedAt.ToString("g")</td>
                    <td>@product.UpdatedAt?.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ProductResponse[]? products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductApi.GetProductsAsync();
    }
}
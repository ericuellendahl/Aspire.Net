@page "/"

@attribute [Authorize]
@rendermode InteractiveServer
@inject AuthApiClientService AuthService
@inject JWTAuthenticationStateProvider AuthStateProvider
@inject AccessTokenService AccessTokenService

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <h1>
        You are authorize!
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Logout">Logout</MudButton>
    </h1>
    <hr />
    <h3>User Information:</h3>

    <MudTimeline Style="width: 26% !important;">
        <MudTimelineItem>
            <MudText>@Role</MudText>
            <MudText>Profile</MudText>
        </MudTimelineItem>
        <MudTimelineItem>
            <MudText>@Email</MudText>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Error">
            <MudText>@TokenExpired</MudText>
            <MudText>Token Expired</MudText>
        </MudTimelineItem>
        <MudTimelineItem Color="Color.Success">
            <MudText>@currentTime</MudText>
            <MudText>Current Time</MudText>
        </MudTimelineItem>
    </MudTimeline>

</AuthorizeView>

@code {
    public string? Email { get; set; }
    public string? Role { get; set; }
    public string? Token { get; set; }
    public DateTime TokenExpired { get; set; }
    public DateTime currentTime { get; set; }
    public bool IsVerified { get; set; }
    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await InitialValues();

        // Create and start the timer
        timer = new Timer(UpdateClock, null, 0, 1000);
    }

    private async Task Logout()
    {
        await AuthService.Logout();
    }

    private async Task InitialValues()
    {
        var state = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = state.User;
        if (user.Identity.IsAuthenticated)
        {
            Token = await AccessTokenService.GetToken();
            Email = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value;
            Role = user.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;

            var expires = user.Claims.FirstOrDefault(x => x.Type == JwtRegisteredClaimNames.Exp).Value;
            if (long.TryParse(expires, out var exp))
            {
                TokenExpired = DateTimeOffset.FromUnixTimeSeconds(exp).LocalDateTime;
            }
        }
    }

    private void UpdateClock(object state)
    {
        currentTime = DateTime.Now;
        InvokeAsync(StateHasChanged);
    }
}